<templateSet group="React">
  <template name="fc" value="interface $NAME$Props {&#10;  // props&#10;}&#10;&#10;export$EXPORT$ const $NAME$: FC&lt;$NAME$Props&gt; = ({&#10;  // props&#10;}) =&gt; {&#10;    $END$&#10;&#10;    return (&#10;        &lt;div&gt;$NAME$&lt;/div&gt;&#10;    );&#10;};" description="Generate functional react component" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="EXPORT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="fc-" value="export$EXPORT$ const $NAME$: FC = () =&gt; {&#10;    $END$&#10;&#10;    return (&#10;        &lt;div&gt;$NAME$&lt;/div&gt;&#10;    );&#10;};" description="Generate propless functional react component" toReformat="true" toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="EXPORT" expression="" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>
  <template name="useState" value="const [$varName$, $setVarName$] = useState&lt;$type$&gt;($default$);" description="generate useState hook" toReformat="false" toShortenFQNames="true">
    <variable name="varName" expression="&quot;name&quot;" defaultValue="" alwaysStopAt="true" />
    <variable name="setVarName" expression="concat(&quot;set&quot;, capitalize(varName))" defaultValue="" alwaysStopAt="false" />
    <variable name="type" expression="" defaultValue="" alwaysStopAt="true" />
    <variable name="default" expression="&quot;null&quot;" defaultValue="" alwaysStopAt="true" />
    <context>
      <option name="TS_STATEMENT" value="true" />
    </context>
  </template>
</templateSet>